// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  fullname          String
  email         String   @unique
  password      String
  role          UserRole @default(CUSTOMER)

// Referral fields - pastikan ada di schema
  referralCode     String?  @unique        // Kode referral unik untuk user ini
  referralPoints   Int      @default(0)    // Points yang dikumpulkan dari referral
  referredBy       String?                 // ID dari user yang mereferensikan
  
  isVerified         Boolean  @default(false)
  verificationToken      String?   
  verificationExpiry     DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  coupons       UserCoupon[]
  referralsMade ReferralTransaction[] @relation("Referrer")
  referralsGot  ReferralTransaction[] @relation("Referred")
  events        Event[]               @relation("OrganizerEvents")
  reviews       Review[]
  transactions  Transaction[]
  dashboards    Dashboard[]
}

enum UserRole {
  CUSTOMER
  EVENT_ORGANIZER
  ADMIN
}

model UserCoupon {
  id           Int        @id @default(autoincrement())
  userId       String     @db.VarChar()
  promotionId  BigInt
  isUsed       Boolean    @default(false)
  usedAt       DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  user         User       @relation(fields: [userId], references: [id])
  promotion    Promotion  @relation(fields: [promotionId], references: [id])
}

model ReferralTransaction {
  id                 BigInt   @id @default(autoincrement())
  referrerId         String   @db.VarChar() // User whos gave referral code
  referredId         String   @db.VarChar() // user whos get referral code
  pointsEarned       Int
  discountPercentage Int
  expiresAt          DateTime
  status             ReferralStatus @default(ACTIVE) // Tambahan untuk tracking status

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  referrer User @relation("Referrer", fields: [referrerId], references: [id])
  referred User @relation("Referred", fields: [referredId], references: [id])
}

// Tambahan enum untuk status referral
enum ReferralStatus {
  ACTIVE
  EXPIRED
  REDEEMED
}

model Event {
  id             BigInt       @id @default(autoincrement())
  organizerId    String       @db.VarChar()
  title          String
  description    String
  category       String
  startDate      DateTime
  endDate        DateTime
  location       String
  venue          String
  totalSeats     Int
  availableSeats Int
  status         EventStatus

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  organizer      User         @relation("OrganizerEvents", fields: [organizerId], references: [id])
  ticketTypes    TicketTypes[]
  promotions     Promotion[]
  reviews        Review[]
  eventMedia     EventMedia[]
  tags           EventTag[]  
}


enum EventStatus {
  DRAFT
  PUBLISHED
  COMPLETED
  CANCELLED 
}

model EventTag {
  id        Int      @id @default(autoincrement())
  eventId   BigInt  
  tag       String   

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  events    Event  @relation(fields: [eventId],references: [id])
}

model EventMedia {
  id      BigInt @id @default(autoincrement())
  eventId BigInt
  url     String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  event   Event   @relation(fields: [eventId], references: [id])
}

model TicketTypes {
  id          BigInt       @id @default(autoincrement())
  eventId     BigInt
  name        String
  price       Int
  quantity    Int
  description String
  ticketType  TicketType

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  event       Event        @relation(fields: [eventId], references: [id])
  transaction Transaction?
}

enum TicketType {
  FREE
  PAID
}

model Promotion {
  id                 BigInt       @id @default(autoincrement())
  eventId            BigInt?      // Buat nullable untuk general promotions
  promoType          String
  discountType       DiscountType
  discountValue      Int   // Bisa 10% atau 20000 tergantung type
  code               String?  @unique // optional, untuk kupon manual (misal: EARLYBIRD10)
  minPurchaseAmount Int?     // opsional, diskon berlaku kalau belanja > Rp 100k
  maxDiscountAmount Int?     // opsional, biar diskon nggak kebablasan
  quota              Int
  usedQuota          Int          @default(0) // Track berapa yang sudah digunakan
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean      @default(true) // Control active status

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  event              Event?        @relation(fields: [eventId], references: [id])
  userCoupons        UserCoupon[]
}


enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model Review {
  id        BigInt   @id @default(autoincrement())
  eventId   BigInt
  userId    String   @db.VarChar()
  rating    Int
  review    String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id            BigInt           @id @default(autoincrement())
  ticketId      BigInt           @unique
  userId        String           @db.VarChar()
  amount        Int
  status        TransactionStatus
  paymentMethod PaymentMethod

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  ticketTypes TicketTypes           @relation(fields: [ticketId], references: [id])
  user          User             @relation(fields: [userId], references: [id])
}

enum TransactionStatus {
  pending
  success
  failed
  refunded
  PENDING 
  SUCCESS 
  FAILED 
  REFUNDED 
}

enum PaymentMethod {
  QR_CODE 
  BANK_TRANSFER
}

model Dashboard {
  id             BigInt   @id @default(autoincrement())
  organizerId    String   @db.VarChar()
  totalEvents    Int
  totalAttendees Int
  totalRevenue   Int
  reportType     ReportType
  periodStart    DateTime
  periodEnd      DateTime

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  organizer      User     @relation(fields: [organizerId], references: [id])
}

enum ReportType {
  DAILY 
  MONTHLY 
  YEAR
}
